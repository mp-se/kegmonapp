name: push

on:
  push:
    branches:
      - master
      - 1.0
  release:
    types: [published]

jobs:
  main:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          cache: 'npm'

      - run: |
          REV=`git rev-parse HEAD | rev | cut -c 1-6 | rev`
          echo "VITE_APP_BUILD=..$REV" >> .env.production
          cat .env.production

      - run: npm install
      - run: npm run build

      - run: |
          ls -al dist/

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=mpse2/kegmonapp
          VERSION=latest
          SHORTREF=${GITHUB_SHA::8}

          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.prep.outputs.tags }}

      #- name: Run Trivy vulnerability scanner
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: 'docker.io/mpse2/kegmonapp:latest'
      #    format: 'template'
      #    template: '@/contrib/sarif.tpl'
      #    output: 'trivy-results.sarif'
#     #    severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
#    severity: 'HIGH,CRITICAL'

#- name: 'Upload Artifact'
#  uses: actions/upload-artifact@v2
#  with:
#    name: 'trivy-results.sarif'
#    path: 'trivy-results.sarif'
#    retention-days: 5

#- name: Upload Trivy scan results to GitHub Security tab
#  uses: github/codeql-action/upload-sarif@v2
#  with:
#    sarif_file: 'trivy-results.sarif'
